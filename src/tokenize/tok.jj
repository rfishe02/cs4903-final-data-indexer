
/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options {
  static = false;
  LOOKAHEAD=1;
}

PARSER_BEGIN(UATokenizer)
import java.io.IOException;
import java.io.FileReader;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.File;
import java.io.InputStreamReader;

public class UATokenizer {

  public static void main(String args[]) throws ParseException {
    if(args == null) {
      args = new String[2];
      args[0] = "./input";
      args[1] = "./output";
    }
    run(args);
  }

  public static void run(String[] args) {
    BufferedWriter bw;

    try {
      File inDir = new File(args[0]);
      File[] files = inDir.listFiles();
      File outDir = new File(args[1]);

      if(!outDir.exists()) {
        outDir.mkdir();
        (new File(args[1]+"/out/")).mkdir();
      }

      long start = System.currentTimeMillis();

      if(files == null) {
        bw = new BufferedWriter(new FileWriter(args[1]+"/out/"+inDir.getName()+".out"));
        processFile(bw,inDir); // Process a single file.
        bw.close();
      } else {

        File[] zDir;
        for(File f : files) {
            zDir = f.listFiles();

            if(zDir != null) {

                for(File z : zDir) {
                    bw = new BufferedWriter(new FileWriter(args[1]+"/out/"+z.getName()+".out"));
                    processFile(bw,z); // Process a files in a subdirectory.
                    bw.close();
                }

            } else {
                bw = new BufferedWriter(new FileWriter(args[1]+"/out/"+f.getName()+".out"));
                processFile(bw,f); // Process multiple files.
                bw.close();
            }
        }
      }

    } catch(IOException ex) {
      ex.printStackTrace();
      System.exit(1);
    }
  }

  public static void processFile(BufferedWriter bw, File f) throws IOException {
    BufferedReader bis = new BufferedReader(new InputStreamReader(new FileInputStream(f),"UTF-8"));
    UATokenizer parser = new UATokenizer(bis);
    Token t = parser.getNextToken();

    while(t.kind != UATokenizerConstants.EOF) {
      bw.write(fmt+"\n");
      t = parser.getNextToken();
    }

      bis.close();
  }

}
PARSER_END(UATokenizer)

TOKEN_MGR_DECLS : {
  String[] tmp;

  public String cleanWord(String str) {
    str = str.replaceAll("['â€™\\.\u2019]|(&#(0)?(39|46|x27|14[56]|18[36]);)",""); // Remove all punctuation.

    if(str.contains("&")) {
      str = str.replaceAll("&([aAeEiIoOuU]([a-z]){3,6}|#[1234]([0-9]){2});","?"); // Substitute accented characters with a '?'.
      str = str.replaceAll("[&]([#])?([0x])? ( ([3-9]){2} | amp | minus | 8722 | 2212 ) [;]"," "); // Replace certain non-punctuation with a space.
    }

    return str;
  }

}

/* ============================================================================================
   DEFINE SYMBOLS THAT MAY BE SKIPPED OR USED LATER.
 ============================================================================================ */

SKIP : {
  < SPACE : (" "|"\t"|"&#160;")+ >
| < NEWLINE : ("\r"|"\n")+ >
}

/* ============================================================================================
   SKIP TAGS, OR PORTIONS OF TAGS THAT MAY NOT CONTAIN USEFUL INFORMATION.
 ============================================================================================ */

// Tags we'll enter and either tokenize, or skip altogther.

SKIP : {
  < SCRIPTTAG2 :  "<" (" ")*("script"|"SCRIPT")(" ")* > : IN_SCRIPT
| < SPTAG : "<" (" ")*("style"|"STYLE"|"button"|"BUTTON"|"time"|"TIME"|"noscript"|"NOSCRIPT")(" ")* > : IN_SP_TAG
| < PRETAG :  "<" (" ")*("pre"|"PRE"|"code"|"CODE")(" ")* > : IN_CODE_TAG
| < CMTTAG : "<" (" ")*"!"(" ")* > : IN_CMT_TAG
| < PHP : "<" (" ")*"?"(" ")*"php"(" ")* > : IN_PHP
}

< IN_SP_TAG > SKIP : {
  < ENDATAG : "<" (" ")*"/"(" ")* ("style"|"STYLE"|"button"|"BUTTON"|"time"|"TIME"|"noscript"|"NOSCRIPT") > : DEFAULT
| < SPCMT : "/*" > : SP_CMT
| < SPTAGMISC : ~[] >
}
< SP_CMT > SKIP : {
  < ENDSPCMT : "*/" > : IN_SP_TAG
| < SPCMTMISC : ~[] >
}
< IN_CMT_TAG > SKIP : {
  < ENDCMTTAG : ("-")?(" ")*">" > : DEFAULT
| < CMTMISC : ~[] >
}

< IN_CODE_TAG > SKIP : {
  < ENDPRETAG : "<" (" ")*"/"(" ")* ("pre"|"PRE"|"code"|"CODE") > : DEFAULT
| < PREMISC : ~[] >
}

< IN_PHP > SKIP : {
  < ENDPHP : "?"(" ")*">" > : DEFAULT
| < PHPCMT : "/*" > : PHP_CMT
| < PHPMISC : ~[] >
}
< PHP_CMT > SKIP : {
  < ENDPHPCMT : "*/" > : IN_PHP
| < PHPCMTMISC : ~[] >
}

/* --------------------------------------------------------------------------------------------
   When we enter a script tag, use different tokenization techniques depending on the type.
 -------------------------------------------------------------------------------------------- */

< IN_SCRIPT > SKIP : {
  < ENDJS : "<" (" ")*"/"(" ")* ("script"|"SCRIPT") > : DEFAULT
| < SCRIPTCMT : "/*" > : IN_SC_CMT
| < JSSQ : "'" > : IN_JSSQ
| < JSDQ : "\"" > : IN_JSDQ
| < SCRIPTTAGMISC : ~[] >
}

< IN_SC_CMT > SKIP : {
  < ENDSCCMT : "*/" > : IN_SCRIPT
| < SCCMTMISC : ~[] >
}

/* --------------------------------------------------------------------------------------------
   Collect the information within quotation marks.
 -------------------------------------------------------------------------------------------- */

< IN_JSSQ > SKIP : {
  < ENDJSSQ : "'" > : IN_SCRIPT
| < JSSQHTTP : <HTTP> >
| < JSSQJNK : <HTTPJNKSQ> >
| < JSDOMSQ : <HTTPDOM> >
| < JSEMAILSQ : <EMAIL> >
}
< IN_JSSQ > TOKEN : {
  < JSWORDSQ : <WORD> > {
    matchedToken.image = cleanWord(matchedToken.image);
  }
}
< IN_JSSQ > SKIP : {
  < JSSQLNK : <HTTPLNKSQ> >
| < JSSQMISC : ~[] >
}

< IN_JSDQ > SKIP : {
  < ENDJSDQ : "\"" > : IN_SCRIPT
| < JSDQHTTP : <HTTP> >
| < JSDQJNK : <HTTPJNKDQ> >
| < JSDOMDQ : <HTTPDOM> >
| < JSEMAILDQ : <EMAIL> >
}
< IN_JSDQ > TOKEN : {
  < JSWORDDQ : <WORD> > {
    matchedToken.image = cleanWord(matchedToken.image);
  }
}
< IN_JSDQ > SKIP : {
  < JSDQLNK : <HTTPLNKDQ> >
| < JSDQMISC : ~[] >
}

/* ============================================================================================
   Skip the contents of HTML attributes that may contain unhelpful information, such
   as style definitions.
 ============================================================================================ */

// text, category, label

SKIP : {
  < OPENTAG : "<" (" ")*( (["a"-"z","A"-"Z","0"-"9","-"])+ )(" ")* > : IN_OPEN_TAG
| < CLOSETAG : "<" (" ")* ( "/"(" ")*(["a"-"z","A"-"Z","0"-"9","-"])+
               | (["a"-"z","A"-"Z","0"-"9","-"])+ (" ")*"/" ) (" ")* >
}

< IN_OPEN_TAG > SKIP : {
  < ENDOPTAG : (">") > : DEFAULT
| < SQATTR : ("alt"|"title"|"content") (" ")*"="(" ")* "'" > : IN_SQ
| < DQATTR : ("alt"|"title"|"content") (" ")*"="(" ")* "\"" > : IN_DQ
| < OPENMISC : ~[] >
}

<IN_SQ> SKIP : {
  < ENDSQ : ("'") > : IN_OPEN_TAG
| < SQHTTP : <HTTP> >
| < SQJNK : <HTTPJNKSQ> >
| < SQDOM : <HTTPDOM> >
| < SQEMAIL : <EMAIL> >
}
<IN_SQ> TOKEN : {
  < SQWORD : (<WORD>|<CONT>) > {
    matchedToken.image = cleanWord(matchedToken.image);
  }
}
<IN_SQ> SKIP : {
  < SQLNK : <HTTPLNKSQ> >
| < SQMISC: ~[] >
}

<IN_DQ> SKIP : {
  < ENDDQ : ("\"") > : IN_OPEN_TAG
| < DQHTTP : <HTTP> >
| < DQJNK : <HTTPJNKDQ> >
| < DQDOM : <HTTPDOM> >
| < DQEMAIL : <EMAIL> >
}
<IN_DQ> TOKEN : {
  < DQWORD : (<WORD>|<CONT>) > {
    matchedToken.image = cleanWord(matchedToken.image);
  }
}
<IN_DQ> SKIP : {
  < DQLNK : <HTTPLNKDQ> >
| < DQMISC : ~[] >
}

/* ============================================================================================
   Skip parts of the url that may contribute more garbage than relevant information.
 ============================================================================================ */

SKIP : {
  < HTTP : (["a"-"z"])+"://" >
| < HTTPJNKSQ : ["&","?"] ( (["a"-"z","A"-"Z","0"-"9"]|<HTTPSYM>|"\""){1,2} )+ ( <HTTPDOM> )?  >
| < HTTPJNKDQ : ["&","?"] ( (["a"-"z","A"-"Z","0"-"9"]|<HTTPSYM>|"'"){1,2} )+ ( <HTTPDOM> )?  >
}

SKIP : {
  < HTTPDOM : ( (["a"-"z","A"-"Z","0"-"9"]){1,2} ( (["a"-"z","A"-"Z","0"-"9","-"]){1,2} )+(".") )+ ( (["a"-"z","A"-"Z"]){1,2} )+ > {
      matchedToken.image = cleanHTML(matchedToken.image);
  }
| < EMAIL : ( (["a"-"z","A"-"Z","0"-"9"]|<EMAILSYM>){1,2} )+ ( (["a"-"z","A"-"Z","0"-"9","="]|<EMAILSYM>){1,2} )?
            "@" ( ( (["a"-"z","A"-"Z","0"-"9","-"]){1,2} )+(".") )+ ( (["a"-"z","A"-"Z","-"]){1,2} )+ > {
      matchedToken.image = cleanEmail(matchedToken.image);
  }
}

SKIP : {
  < HTTPLNKSQ : ("\\")?"/" ( (["a"-"z","A"-"Z","0"-"9"]|<LINKSYM>|"\""){1,2} )+
  ( <HTTPDOM> | "."("html"|"php"|"jsp"|"png"|"jpeg"|"jpg"|"css"|"xml") )? >
| < HTTPLNKDQ : ("\\")?"/" ( (["a"-"z","A"-"Z","0"-"9"]|<LINKSYM>|"'"){1,2} )+
  ( <HTTPDOM> | "."("html"|"php"|"jsp"|"png"|"jpeg"|"jpg"|"css"|"xml") )? >
}

/* ============================================================================================
   REGEX USED TO COLLECT WORDS.
 ============================================================================================ */

TOKEN : {
  < CROWDED : ">" ( <WORD> | <CONT> ) > {
    matchedToken.image = image.substring(image.indexOf(">")+1,image.length());
    matchedToken.image = cleanWord(matchedToken.image);
  }
| < CROWDED2 : ( <WORD> | <CONT> ) < CLOSETAG > > {
    matchedToken.image = image.substring(0,image.indexOf("<"));
    matchedToken.image = cleanWord(matchedToken.image);
  }
}

/* --------------------------------------------------------------------------------------------
   The following identifies basic words.
 -------------------------------------------------------------------------------------------- */

 TOKEN : {
   < ALPHA : (["a"-"z","A"-"Z"]|["\u00C0"-"\u00FF"]|["\u0100"-"\u017F"]|["\u0100"-"\u017F"]|["\u0180"-"\u024F"]|["\u1E02"-"\u1EF3"]) >
 }

TOKEN : {
  < BREV : ( < ALPHA > ( "&#46;" | "&#046;" | ["0"-"9","."] ) )+ < ALPHA > ( "&#46;" | "&#046;" | ["0"-"9","."] ) > {
    matchedToken.image = cleanWord(matchedToken.image);
  }
| < CONT : ( < ALPHA > )+ ( < ENGSYMB > | < CSEP > | "-" ) ( < ALPHA > )+ > {
    matchedToken.image = cleanWord(matchedToken.image);
  }
| < WORD : < ALPHA > ( < ALPHA > )+ >
}

SKIP : {
  < ENGSYMB : "&" ( "#" (["0"-"9"]){1} ( (["0"-"9"]){1} | ((["0"-"5"]){1}|(["7"-"9"]){1}) (["0"-"9"]){1} )
    | (["a","A","e","E","i","I","o","O","u","U","n","N"]|"sz"|"ord")
      ("acute"|"cedil"|"circ"|"grave"|"lig"|"slash"|"tilde"|"uml"|"ring"|["f","m"])
    | ("middot"|"eth"|"ETH"|"thorn"|"THORN") ) ";" >
| < SYMBOL : "&" ("#")?(["a"-"z","0"-"9"]){2,12} ";" >
| < CSEP : ("'"|"â€™"|"\u2019"|"Ã¢â‚¬â„¢"|"&#x27;"|"&#" (["3"-"4"]){2} ";") > // Contraction seperator.
| < HTTPSYM : [",","-","_",":",";","+","^","%","#","=","@","~","[","]","$","(",")","*"] >
| < LINKSYM : [",","-","_",":",";","+","^","%","#","=","@","~","[","]","$","(",")","*"," "]>
| < EMAILSYM : ["!","#","$","%","^","&","*","_","+","=","-"] >
}

SKIP : {
  < MISC: ~[] >
}
